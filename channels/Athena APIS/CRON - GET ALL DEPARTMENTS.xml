<channel version="3.4.2">
  <id>9155886e-6086-4829-b4f5-cc7c4bf76460</id>
  <nextMetaDataId>8</nextMetaDataId>
  <name>CRON - GET ALL DEPARTMENTS</name>
  <description>Fetch all the appointments</description>
  <enabled>false</enabled>
  <lastModified>
    <time>1492326783573</time>
    <timezone>Asia/Calcutta</timezone>
  </lastModified>
  <revision>28</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.jdbc.DatabaseReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <pollConnectorProperties version="3.4.2">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>120000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <driver>com.mysql.jdbc.Driver</driver>
      <url>jdbc:mysql://host:port/dbname</url>
      <username></username>
      <password></password>
      <select>var dbConn;

try {
	 dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
        var expression = &quot;SELECT * FROM ehr_account WHERE is_enabled=true AND is_locked=false AND account_status=&apos;ACTIVE&apos; AND internal_account_status in (&apos;AUTHENTICATION_SUCCESSFUL&apos;);&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    return result;
} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</select>
      <update>// This update script will be executed once for every result returned from the above query.
var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://host:port/dbname&apos;,&apos;&apos;,&apos;&apos;);

} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</update>
      <useScript>true</useScript>
      <cacheResults>true</cacheResults>
      <keepConnectionOpen>true</keepConnectionOpen>
      <updateMode>1</updateMode>
      <retryCount>3</retryCount>
      <retryInterval>10000</retryInterval>
      <fetchSize>1000</fetchSize>
      <encoding>DEFAULT_ENCODING</encoding>
    </properties>
    <transformer version="3.4.2">
      <steps/>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8
cmVzdWx0Lz4NCg==</inboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules/>
    </filter>
    <transportName>Database Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>Fetch TeleHealth appointments</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>https://api.athenahealth.com/${ATHENA_API_VERSION}/${account.practiceId}/departments?providerlist=false&amp;showalldepartments=false</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>${AUTHORIZATION}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>New Step</name>
            <script>var dbConn;
var appointmentTypeId = &quot;&quot;;
var accountId = msg[&quot;id&quot;];
var account = $(&apos;account&apos;);

try {
	  dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var ERROR = response.getError();
    if (ERROR == null || ERROR == &quot;&quot;) {
        var data = response.getMessage();
        var departments = JSON.parse(data);
        var expression = &quot;DELETE FROM ehr_practice_detail where ehr_account_id= &apos;&quot; + account.accountId + &quot;&apos;&quot;;
        logger.info(expression);
        dbConn.executeUpdate(expression);
        if (departments.totalcount &gt; 0) {
            for each(var department in departments.departments) {
                var expression = &quot;INSERT INTO ehr_practice_detail(`ehr_account_id`,`department_id`,`ehr_type`) VALUES (&apos;&quot; + account.accountId + &quot;&apos;,&apos;&quot; + department.departmentid + &quot;&apos;,&apos;ATHENA&apos;);&quot;;
                logger.info(expression);
                dbConn.executeUpdate(expression);
            }
        }
        var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;FETCH_DEPARTMENTS_SUCCESSFUL&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
        logger.info(expression);
        dbConn.executeUpdate(expression);
        return true;
    }
    var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;FETCH_DEPARTMENTS_FAILED&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    dbConn.executeUpdate(expression);
    return false;
} catch (e) {
    logger.warn(&quot;Error in Fetch Department channel&quot; + e);
    var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;FETCH_DEPARTMENTS_FAILED&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    dbConn.executeUpdate(expression);
    return false;
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var dbConn;
var appointmentTypeId = &quot;&quot;;
var accountId = msg[&quot;id&quot;];
var account = $(&apos;account&apos;);

try {
	  dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var ERROR = response.getError();
    if (ERROR == null || ERROR == &quot;&quot;) {
        var data = response.getMessage();
        var departments = JSON.parse(data);
        var expression = &quot;DELETE FROM ehr_practice_detail where ehr_account_id= &apos;&quot; + account.accountId + &quot;&apos;&quot;;
        logger.info(expression);
        dbConn.executeUpdate(expression);
        if (departments.totalcount &gt; 0) {
            for each(var department in departments.departments) {
                var expression = &quot;INSERT INTO ehr_practice_detail(`ehr_account_id`,`department_id`,`ehr_type`) VALUES (&apos;&quot; + account.accountId + &quot;&apos;,&apos;&quot; + department.departmentid + &quot;&apos;,&apos;ATHENA&apos;);&quot;;
                logger.info(expression);
                dbConn.executeUpdate(expression);
            }
        }
        var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;FETCH_DEPARTMENTS_SUCCESSFUL&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
        logger.info(expression);
        dbConn.executeUpdate(expression);
        return true;
    }
    var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;FETCH_DEPARTMENTS_FAILED&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    dbConn.executeUpdate(expression);
    return false;
} catch (e) {
    logger.warn(&quot;Error in Fetch Department channel&quot; + e);
    var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;FETCH_DEPARTMENTS_FAILED&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    dbConn.executeUpdate(expression);
    return false;
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>//ATHENA SUBSCRIBE TO THE APPOINTMENT CHANGED EVENTS
var dbConn;
var account = {};
var accountId = msg[&quot;id&quot;];
account.accountId = msg[&quot;id&quot;];
account.appointmentTypeId = &quot;&quot;;
try {
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var expression = &quot;SELECT * FROM auth_token_detail where ehr_account_id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        channelMap.put(&quot;AUTHORIZATION&quot;, result.getString(&quot;token_type&quot;) + &quot; &quot; + result.getString(&quot;auth_token&quot;));
    } else {
        return false;
    }
    expression = &quot;SELECT * FROM ehr_account ea WHERE ea.id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        account.practiceId = result.getString(&quot;practice_id&quot;);
        account.accountName = result.getString(&quot;account_name&quot;);
        channelMap.put(&quot;account&quot;,account);
        return true;
    }
    return false;
} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>//ATHENA SUBSCRIBE TO THE APPOINTMENT CHANGED EVENTS
var dbConn;
var account = {};
var accountId = msg[&quot;id&quot;];
account.accountId = msg[&quot;id&quot;];
account.appointmentTypeId = &quot;&quot;;
try {
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var expression = &quot;SELECT * FROM auth_token_detail where ehr_account_id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        channelMap.put(&quot;AUTHORIZATION&quot;, result.getString(&quot;token_type&quot;) + &quot; &quot; + result.getString(&quot;auth_token&quot;));
    } else {
        return false;
    }
    expression = &quot;SELECT * FROM ehr_account ea WHERE ea.id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        account.practiceId = result.getString(&quot;practice_id&quot;);
        account.accountName = result.getString(&quot;account_name&quot;);
        channelMap.put(&quot;account&quot;,account);
        return true;
    }
    return false;
} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>