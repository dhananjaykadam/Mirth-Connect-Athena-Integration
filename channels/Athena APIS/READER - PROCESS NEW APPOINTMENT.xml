<channel version="3.4.2">
  <id>4212ddd4-1235-4f36-afb2-52a7eaf8eb51</id>
  <nextMetaDataId>11</nextMetaDataId>
  <name>READER - PROCESS NEW APPOINTMENT</name>
  <description>Process new appointment from athena</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1499236977824</time>
    <timezone>Asia/Calcutta</timezone>
  </lastModified>
  <revision>199</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>d4</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.4.2">
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>10</metaDataId>
      <name>APPOINTMENT MODIFICATIONS</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>return true;</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>var dbConn;
try {
    var appointmentRaw = connectorMessage.getRawData();
    var appointmentInfo = JSON.parse(appointmentRaw);
    //    logger.info(JSON.stringify(appointmentInfo.appointment));
    //logger.info(JSON.stringify(appointmentInfo.account));
    channelMap.put(&quot;appointment&quot;, appointmentInfo.appointment);
    channelMap.put(&quot;account&quot;, appointmentInfo.account);
    channelMap.put(&quot;rawMessage&quot;, appointmentInfo);
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var expression = &quot;SELECT * FROM auth_token_detail where ehr_account_id=&apos;&quot; + appointmentInfo.account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        channelMap.put(&quot;AUTHORIZATION&quot;, result.getString(&quot;token_type&quot;) + &quot; &quot; + result.getString(&quot;auth_token&quot;));
        return true;
    } else {
        return false;
    }
    return false;
} catch (e) {
    logger.info(&quot;ERROR IN PROCESS NEW APPOINTMENT FILTER&quot; + e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var dbConn;
try {
    var appointmentRaw = connectorMessage.getRawData();
    var appointmentInfo = JSON.parse(appointmentRaw);
    //    logger.info(JSON.stringify(appointmentInfo.appointment));
    //logger.info(JSON.stringify(appointmentInfo.account));
    channelMap.put(&quot;appointment&quot;, appointmentInfo.appointment);
    channelMap.put(&quot;account&quot;, appointmentInfo.account);
    channelMap.put(&quot;rawMessage&quot;, appointmentInfo);
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var expression = &quot;SELECT * FROM auth_token_detail where ehr_account_id=&apos;&quot; + appointmentInfo.account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        channelMap.put(&quot;AUTHORIZATION&quot;, result.getString(&quot;token_type&quot;) + &quot; &quot; + result.getString(&quot;auth_token&quot;));
        return true;
    } else {
        return false;
    }
    return false;
} catch (e) {
    logger.info(&quot;ERROR IN PROCESS NEW APPOINTMENT FILTER&quot; + e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>GET PATIENT DETAILS</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>https://api.athenahealth.com/${PREVIEW}/${PRACTICE_ID}/patients/${PATIENT_ID}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>${AUTHORIZATION}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>New Step</name>
            <script>var rawPatient=response.getMessage();
var patientList=JSON.parse(rawPatient);
if(patientList.length&gt;0){
	logger.info(&quot;Patient Email : &quot;+patientList[0].email);
	logger.info(JSON.stringify(patientList[0]));
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var rawPatient=response.getMessage();
var patientList=JSON.parse(rawPatient);
if(patientList.length&gt;0){
	logger.info(&quot;Patient Email : &quot;+patientList[0].email);
	logger.info(JSON.stringify(patientList[0]));
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>2</metaDataId>
      <name>GET PROVIDER DETAILS</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>10</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>https://api.athenahealth.com/${ATHENA_API_VERSION}/${account.practiceId}/providers/${appointment.providerid}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>${AUTHORIZATION}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>New Step</name>
            <script>var ERROR = response.getError();
 if (ERROR == null || ERROR == &quot;&quot;) {
     var rawProvider = response.getMessage();
     var providerList = JSON.parse(rawProvider);
     if (providerList.length &gt; 0) {
         //logger.info(&quot;Provider Email : &quot;+providerList[0].email);
//         logger.info(&quot;Provider JSON : &quot; + JSON.stringify(providerList[0]));
         channelMap.put(&quot;provider&quot;, providerList[0]);
     }

 }</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var ERROR = response.getError();
 if (ERROR == null || ERROR == &quot;&quot;) {
     var rawProvider = response.getMessage();
     var providerList = JSON.parse(rawProvider);
     if (providerList.length &gt; 0) {
         //logger.info(&quot;Provider Email : &quot;+providerList[0].email);
//         logger.info(&quot;Provider JSON : &quot; + JSON.stringify(providerList[0]));
         channelMap.put(&quot;provider&quot;, providerList[0]);
     }

 }</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>4</metaDataId>
      <name>PROCESS OMNIPRESENCE</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>var appointment = $(&apos;appointment&apos;);
var account = $(&apos;account&apos;);
var providerAth = $(&apos;provider&apos;);

try{

//Add new Provider
var provider = {};
provider.username = &quot;ah0.d&quot; + account.practiceID + &quot;&quot; + providerAth.providerid;
provider.password = provider.username;//providerAth.providerid;
provider.name = providerAth.firstname + &quot; &quot; + providerAth.lastname;
provider.email = &quot;&quot;;
provider.properties = {};
provider.properties.package = account.package;
provider.properties.role = $(&apos;PROVIDER_ROLE&apos;);
provider.properties.duration = account.duration;
provider.properties.registration = account.registration;
//var userData=router.routeMessage(&quot;GET - GET USER BY USERNAME&quot;, provider.username);
//var userDataJson=JSON.parse(userData.getMessage());
var chresponse = router.routeMessage(&quot;POST - ADD NEW USER&quot;, JSON.stringify(provider));
//channelMap.put(&quot;rtcprovider&quot;,provider);

//Add new Patient
var patient = {};
patient.username = &quot;ah0.p&quot; + account.practiceID + &quot;&quot; + appointment.patient.patientid;
patient.password = patient.username;//appointment.patient.patientid;
patient.name = appointment.patient.firstname + &quot; &quot; + appointment.patient.lastname;
patient.email = appointment.patient.email;
patient.properties = {};
patient.properties.package =account.package;
patient.properties.role = $(&apos;PATIENT_ROLE&apos;);
patient.properties.duration =  account.duration;
patient.properties.registration =account.registration;
var chresponse = router.routeMessage(&quot;POST - ADD NEW USER&quot;, JSON.stringify(patient));
//channelMap.put(&quot;rtcpatient&quot;,patient);
//Add patient to provider list
var rosterItemDP = {};
rosterItemDP.username = provider.username;
rosterItemDP.jid = patient.username + $(&apos;TELEHEALTH_JID&apos;);
rosterItemDP.nickname = patient.name;
rosterItemDP.subscriptionType = $(&apos;TELEHEALTH_SUBSCRIPTION_TYPE&apos;);
var chresponse = router.routeMessage(&quot;POST - ADD USER TO BUDDY LIST&quot;, JSON.stringify(rosterItemDP));


//Add provider to patient list
var rosterItemPD = {};
rosterItemPD.username = patient.username;
rosterItemPD.jid = provider.username + $(&apos;TELEHEALTH_JID&apos;);
rosterItemPD.nickname = provider.name;
rosterItemPD.subscriptionType = $(&apos;TELEHEALTH_SUBSCRIPTION_TYPE&apos;);
var chresponse = router.routeMessage(&quot;POST - ADD USER TO BUDDY LIST&quot;, JSON.stringify(rosterItemPD));

//POST Appointment link to athena
//Show on Schedule
var rawAppointment = $(&apos;rawMessage&apos;);
rawAppointment.appointment.note = {};
rawAppointment.appointment.note.content = &quot;TH365 APN&quot;;
rawAppointment.appointment.note.displayonschedule = true;
chresponse = router.routeMessage(&quot;READER - POST APPOINTMENT NOTES&quot;, JSON.stringify(rawAppointment));

//Generate Provider Link
var str=(new java.lang.String(&quot;username=&quot;+provider.username+&quot;&amp;password=&quot;+provider.password+&quot;&amp;&quot; + &quot;remotelogin=true&amp;company=&quot;+account.accountName+&quot;&amp;url=http://dev.telehealth365.com&quot;)).getBytes();
var loginLink = FileUtil.encode(str);
var loginLinkEncoded=$(&quot;TELEHEALTH_VIDEO_CONFERENCE_URL&quot;)+ encodeURIComponent(loginLink);
channelMap.put(&quot;providerLoginLink&quot;,loginLinkEncoded);
//Generate Patient Link
var strr=(new java.lang.String(&quot;username=&quot;+patient.username+&quot;&amp;password=&quot;+patient.password+&quot;&amp;&quot; + &quot;remotelogin=true&amp;company=&quot;+account.accountName+&quot;&amp;url=http://dev.telehealth365.com&quot;)).getBytes();
var patientLoginLink =  FileUtil.encode(strr);
var patientLoginLinkEncoded=$(&quot;TELEHEALTH_VIDEO_CONFERENCE_URL&quot;)+ encodeURIComponent(patientLoginLink);
channelMap.put(&quot;patientLoginLink&quot;,patientLoginLinkEncoded);

//Post provider link
rawAppointment.appointment.note = {};
rawAppointment.appointment.note.content =&quot;Please copy and paste this text into browser and press enter:  &quot;+ loginLinkEncoded;
rawAppointment.appointment.note.displayonschedule = false;
chresponse = router.routeMessage(&quot;READER - POST APPOINTMENT NOTES&quot;, JSON.stringify(rawAppointment));
} catch (e) {
    logger.info(e);
}
return true;</script>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>New Step</name>
            <script>var dbConn;
var account=$(&apos;account&apos;)
try{
	dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
 var expression = &quot; SELECT * FROM ehr_account WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var resultSet = dbConn.executeCachedQuery(expression);
    var exp2 = &quot;&quot;;
    var resultSet2 = null;
    if(resultSet.next()) {
        exp2 = &quot;SELECT * FROM ehr_auth_detail at,ehr_practice_detail ep where at.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos; and ep.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos;;&quot;;
        //    	logger.info(exp2);
        resultSet2 = dbConn.executeCachedQuery(exp2);
        account.practiceID = resultSet.getString(&quot;practice_id&quot;);
        account.accountName = resultSet.getString(&quot;account_name&quot;);
        account.departmentId = null;
        account.clientSecret = null;
        account.clientId = null;
        account.ehrType = null;
        account.thAppointmentId = null;

        if (resultSet2.next()) {
            account.clientSecret = resultSet2.getString(&quot;ehr_secret_key&quot;);
            account.clientID = resultSet2.getString(&quot;ehr_app_key&quot;);
            account.EHRType = resultSet2.getString(&quot;ehr_type&quot;);

            account.package = resultSet2.getString(&quot;package&quot;);
            account.registration = resultSet2.getString(&quot;registration&quot;);
            account.duration = resultSet2.getString(&quot;duration&quot;);
            account.role = resultSet2.getString(&quot;role&quot;);
		  account.email = resultSet2.getString(&quot;email&quot;);
		  account.licenses = resultSet2.getString(&quot;licenses&quot;);
         }
         channelMap.put(&quot;account&quot;,account);
    }

} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
    return true;
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var dbConn;
var account=$(&apos;account&apos;)
try{
	dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
 var expression = &quot; SELECT * FROM ehr_account WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var resultSet = dbConn.executeCachedQuery(expression);
    var exp2 = &quot;&quot;;
    var resultSet2 = null;
    if(resultSet.next()) {
        exp2 = &quot;SELECT * FROM ehr_auth_detail at,ehr_practice_detail ep where at.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos; and ep.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos;;&quot;;
        //    	logger.info(exp2);
        resultSet2 = dbConn.executeCachedQuery(exp2);
        account.practiceID = resultSet.getString(&quot;practice_id&quot;);
        account.accountName = resultSet.getString(&quot;account_name&quot;);
        account.departmentId = null;
        account.clientSecret = null;
        account.clientId = null;
        account.ehrType = null;
        account.thAppointmentId = null;

        if (resultSet2.next()) {
            account.clientSecret = resultSet2.getString(&quot;ehr_secret_key&quot;);
            account.clientID = resultSet2.getString(&quot;ehr_app_key&quot;);
            account.EHRType = resultSet2.getString(&quot;ehr_type&quot;);

            account.package = resultSet2.getString(&quot;package&quot;);
            account.registration = resultSet2.getString(&quot;registration&quot;);
            account.duration = resultSet2.getString(&quot;duration&quot;);
            account.role = resultSet2.getString(&quot;role&quot;);
		  account.email = resultSet2.getString(&quot;email&quot;);
		  account.licenses = resultSet2.getString(&quot;licenses&quot;);
         }
         channelMap.put(&quot;account&quot;,account);
    }

} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
    return true;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>9</metaDataId>
      <name>EMAIL SENDER</name>
      <properties class="com.mirth.connect.connectors.smtp.SmtpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <smtpHost>mail.telehealth365.com</smtpHost>
        <smtpPort>465</smtpPort>
        <overrideLocalBinding>false</overrideLocalBinding>
        <localAddress>0.0.0.0</localAddress>
        <localPort>0</localPort>
        <timeout>10000</timeout>
        <encryption>SSL</encryption>
        <authentication>true</authentication>
        <username>system.admin@telehealth365.com</username>
        <password>omnireach123$</password>
        <to>${appointment.patient.email}</to>
        <from>system.admin@telehealth365.com</from>
        <cc></cc>
        <bcc></bcc>
        <replyTo></replyTo>
        <headers class="linked-hash-map"/>
        <subject>Online Appointment Confirmation with Dr. ${provider.firstname} ${provider.lastname}  on ${appointment.date}, ${appointment.starttime}</subject>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <html>false</html>
        <body>Dear ${appointment.patient.firstname} ${appointment.patient.lastname}

Thank you for booking your online appointment with Dr. ${provider.firstname} ${provider.lastname}. Here is your appointment information:

Appointment Date and Time: ${appointment.date}
Time: ${appointment.starttime}
Visit type: Online consultation 

Online consultation Info:
1.	Use computing device with Google Chrome Browser, Webcam and internet. 
2.	Go to our website -- (Healthcare Provider’s website URL)
3.	Select “Patient Reception Room” and enter ID, Password and select “login” button
a.	ID = ah0.p${account.practiceId}${appointment.patient.patientid}
b.	Password = ah0.p${account.practiceId}${appointment.patient.patientid}

OR copy paste this link on chrome browser ${patientLoginLink}
If you require additional information or need to make changes to the appointment date / time, please call our office.
We look forward to see you.


${account.accountName}
Contact Details.</body>
        <attachments/>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>SMTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>false</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>