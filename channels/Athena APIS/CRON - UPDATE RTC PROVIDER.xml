<channel version="3.4.2">
  <id>7f636ff5-9785-4646-a82d-dfb9bb0b24c7</id>
  <nextMetaDataId>9</nextMetaDataId>
  <name>CRON - UPDATE RTC PROVIDER</name>
  <description>Fetch all the appointments</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1492720919691</time>
    <timezone>Asia/Calcutta</timezone>
  </lastModified>
  <revision>43</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.jdbc.DatabaseReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <pollConnectorProperties version="3.4.2">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>1200000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <driver>com.mysql.jdbc.Driver</driver>
      <url>jdbc:mysql://host:port/dbname</url>
      <username></username>
      <password></password>
      <select>var dbConn;

try {
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var expression = &quot;SELECT * FROM ehr_account WHERE is_enabled=true AND is_locked=false AND account_status=&apos;ACTIVE&apos; AND internal_account_status in (&apos;ACTIVATED&apos;) AND id in(SELECT ehr_account_id FROM ehr_practice_detail WHERE updatetime &lt; now() AND is_update_ready=true);&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    return result;
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</select>
      <update>// This update script will be executed once for every result returned from the above query.
var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://host:port/dbname&apos;,&apos;&apos;,&apos;&apos;);

} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</update>
      <useScript>true</useScript>
      <cacheResults>true</cacheResults>
      <keepConnectionOpen>true</keepConnectionOpen>
      <updateMode>1</updateMode>
      <retryCount>3</retryCount>
      <retryInterval>10000</retryInterval>
      <fetchSize>1000</fetchSize>
      <encoding>DEFAULT_ENCODING</encoding>
    </properties>
    <transformer version="3.4.2">
      <steps/>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8
cmVzdWx0Lz4NCg==</inboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules/>
    </filter>
    <transportName>Database Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>POST NEW APPOINTMENT</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>var dbConn;
var account = $(&apos;account&apos;);
try {
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var providersraw = router.routeMessage(&quot;CRON - GET ALL PROVIDERS&quot;, JSON.stringify($(&apos;account&apos;)));
    var providers = JSON.parse(providersraw.getMessage());
    for each(var providerath in providers.providers) {
        //Add new Provider
        var provider = {};
        provider.username = &quot;ah0.d&quot; + account.practiceID + &quot;&quot; + providerath.providerid;
        provider.password = provider.username; //providerath.providerid;
        provider.name = providerath.firstname + &quot; &quot; + providerath.lastname;
        provider.email = &quot;&quot;;
        provider.properties = {};
        provider.properties.package = account.package;
        provider.properties.role = $(&apos;PROVIDER_ROLE&apos;);
        provider.properties.duration = account.duration;
        provider.properties.registration = account.registration;
        var chresponse = router.routeMessage(&quot;PUT - UPDATE USER&quot;, JSON.stringify(provider));
        //var chresponse = router.routeMessage(&quot;POST - ADD NEW USER&quot;, JSON.stringify(provider));
    }
    var expression = &quot;UPDATE ehr_practice_detail SET is_update_ready = false where ehr_account_id=&apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var resultSet = dbConn.executeUpdate(expression);
} catch (e) {
    logger.info(e);
}
return true;</script>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>New Step</name>
            <script>var dbConn;
var account = {};
var accountId = msg[&quot;id&quot;];
account.accountId = msg[&quot;id&quot;];
try{
	dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
 var expression = &quot; SELECT * FROM ehr_account WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var resultSet = dbConn.executeCachedQuery(expression);
    var exp2 = &quot;&quot;;
    var resultSet2 = null;
    if(resultSet.next()) {
        exp2 = &quot;SELECT * FROM ehr_auth_detail at,ehr_practice_detail ep where at.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos; and ep.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos;;&quot;;
        //    	logger.info(exp2);
        resultSet2 = dbConn.executeCachedQuery(exp2);
        account.practiceID = resultSet.getString(&quot;practice_id&quot;);
        account.accountName = resultSet.getString(&quot;account_name&quot;);
        account.departmentId = null;
        account.clientSecret = null;
        account.clientId = null;
        account.ehrType = null;
        account.thAppointmentId = null;

        if (resultSet2.next()) {
            account.clientSecret = resultSet2.getString(&quot;ehr_secret_key&quot;);
            account.clientID = resultSet2.getString(&quot;ehr_app_key&quot;);
            account.EHRType = resultSet2.getString(&quot;ehr_type&quot;);

            account.package = resultSet2.getString(&quot;package&quot;);
            account.registration = resultSet2.getString(&quot;registration&quot;);
            account.duration = resultSet2.getString(&quot;duration&quot;);
            account.role = resultSet2.getString(&quot;role&quot;);
		  account.email = resultSet2.getString(&quot;email&quot;);
		  account.licenses = resultSet2.getString(&quot;licenses&quot;);
         }
         channelMap.put(&quot;account&quot;,account);
    }

} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
    return true;
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var dbConn;
var account = {};
var accountId = msg[&quot;id&quot;];
account.accountId = msg[&quot;id&quot;];
try{
	dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
 var expression = &quot; SELECT * FROM ehr_account WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
    logger.info(expression);
    var resultSet = dbConn.executeCachedQuery(expression);
    var exp2 = &quot;&quot;;
    var resultSet2 = null;
    if(resultSet.next()) {
        exp2 = &quot;SELECT * FROM ehr_auth_detail at,ehr_practice_detail ep where at.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos; and ep.ehr_account_id=&apos;&quot; + resultSet.getString(&quot;id&quot;) + &quot;&apos;;&quot;;
        //    	logger.info(exp2);
        resultSet2 = dbConn.executeCachedQuery(exp2);
        account.practiceID = resultSet.getString(&quot;practice_id&quot;);
        account.accountName = resultSet.getString(&quot;account_name&quot;);
        account.departmentId = null;
        account.clientSecret = null;
        account.clientId = null;
        account.ehrType = null;
        account.thAppointmentId = null;

        if (resultSet2.next()) {
            account.clientSecret = resultSet2.getString(&quot;ehr_secret_key&quot;);
            account.clientID = resultSet2.getString(&quot;ehr_app_key&quot;);
            account.EHRType = resultSet2.getString(&quot;ehr_type&quot;);

            account.package = resultSet2.getString(&quot;package&quot;);
            account.registration = resultSet2.getString(&quot;registration&quot;);
            account.duration = resultSet2.getString(&quot;duration&quot;);
            account.role = resultSet2.getString(&quot;role&quot;);
		  account.email = resultSet2.getString(&quot;email&quot;);
		  account.licenses = resultSet2.getString(&quot;licenses&quot;);
         }
         channelMap.put(&quot;account&quot;,account);
    }

} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
    return true;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>