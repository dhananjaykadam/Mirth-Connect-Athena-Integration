<channel version="3.4.2">
  <id>966a9aef-a6a8-492d-9628-fc66c18ee1f7</id>
  <nextMetaDataId>17</nextMetaDataId>
  <name>CRON - ATHENA-TOKEN-POLLER</name>
  <description>Athena 
API to subscribe order 
API to get orders
API to get Patient Information
</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1498115829873</time>
    <timezone>Asia/Calcutta</timezone>
  </lastModified>
  <revision>34</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.jdbc.DatabaseReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <pollConnectorProperties version="3.4.2">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>900000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <driver>com.mysql.jdbc.Driver</driver>
      <url>jdbc:mysql://host:port/dbname</url>
      <username></username>
      <password></password>
      <select>var dbConn;

try {
	 dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
//   globalMap.put(&quot;dbCon&quot;,dbConn);
        var expression = &quot;SELECT * FROM ehr_account WHERE is_enabled=true AND is_locked=false AND account_status=&apos;ACTIVE&apos; AND internal_account_status in (&apos;CREATED&apos;,&apos;UPDATED&apos;,&apos;ACTIVATED&apos;,&apos;AUTHENTICATION_SUCCESSFUL&apos;,&apos;POST_APPOINTMENT_TYPE_SUCCESSFUL&apos;);&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    return result;
} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</select>
      <update>// This update script will be executed once for every result returned from the above query.
var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://host:port/dbname&apos;,&apos;&apos;,&apos;&apos;);

} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</update>
      <useScript>true</useScript>
      <cacheResults>true</cacheResults>
      <keepConnectionOpen>true</keepConnectionOpen>
      <updateMode>1</updateMode>
      <retryCount>3</retryCount>
      <retryInterval>10000</retryInterval>
      <fetchSize>1000</fetchSize>
      <encoding>DEFAULT_ENCODING</encoding>
    </properties>
    <transformer version="3.4.2">
      <steps/>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8
cmVzdWx0Lz4NCg==</inboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules/>
    </filter>
    <transportName>Database Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>7</metaDataId>
      <name>Get Access Key from Athena</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>15000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>10</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>${ATHENA_URL}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map">
          <entry>
            <string>grant_type</string>
            <list>
              <string>client_credentials</string>
            </list>
          </entry>
        </parameters>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username>${account.appId}</username>
        <password>${account.appSecret}</password>
        <content></content>
        <contentType>application/x-www-form-urlencoded</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>DEFAULT_ENCODING</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Get Access Token</name>
            <script>//try {
var account = channelMap.get(&quot;account&quot;);
var accountId = account.accountId;
var dbConn;
try {
    var data = response.getError();
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    if (data != null &amp;&amp; data != &quot;&quot;) {
        var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;AUTHENTICATION_TOKEN_ERROR&apos; WHERE id = &apos;&quot; + $(&apos;account&apos;).accountId + &quot;&apos;;&quot;;
        logger.info(expression);
        dbConn.executeUpdate(expression);
        logger.info(&quot;AUTHENTICATION TOKEN API FAILED FOR ACCOUNT - &quot; + account.accountId);
		router.routeMessage(&quot;EMAIL - ACCOUNT FAILURE&quot;,JSON.stringify(account));
    } else {
        var data = response.getMessage();
        var jsonData = JSON.parse(data);
        if (jsonData) {
            var tokenTye = jsonData.token_type.charAt(0).toUpperCase() + jsonData.token_type.slice(1);
            var authorization = tokenTye + &quot; &quot; + jsonData.access_token;
            logger.info(authorization);
            var expression = &quot;SELECT * FROM auth_token_detail where ehr_account_id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
            logger.info(expression);
            var result = dbConn.executeCachedQuery(expression);
            if (result.next()) {
                var expression = &quot;UPDATE auth_token_detail set auth_token=&apos;&quot; + jsonData.access_token + &quot;&apos;,token_type=&apos;&quot; + tokenTye + &quot;&apos;  WHERE ehr_account_id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
                logger.info(expression);
                dbConn.executeUpdate(expression);
            } else {
                var expression = &quot;INSERT INTO `auth_token_detail`(`id`,`auth_token`,`token_type`,`ehr_account_id`)VALUES(0,&apos;&quot; + jsonData.access_token + &quot;&apos;,&apos;&quot; + tokenTye + &quot;&apos;,&apos;&quot; + accountId + &quot;&apos;);&quot;;
                logger.info(expression);
                dbConn.executeUpdate(expression);
            }

 		var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;AUTHENTICATION_SUCCESSFUL&apos; WHERE id = &apos;&quot; + $(&apos;account&apos;).accountId + &quot;&apos; AND internal_account_status in (&apos;CREATED&apos;,&apos;UPDATED&apos;);&quot;;
        	logger.info(expression);
        	dbConn.executeUpdate(expression);

//            var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;AUTHENTICATION_SUCCESSFUL&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
//            logger.info(expression);
//            dbConn.executeUpdate(expression);
//            logger.info(&quot;AUTHENTICATION TOKEN API SUCCESS FOR ACCOUNT - &quot; + account.accountId);

        }
    }
} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>//try {
var account = channelMap.get(&quot;account&quot;);
var accountId = account.accountId;
var dbConn;
try {
    var data = response.getError();
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    if (data != null &amp;&amp; data != &quot;&quot;) {
        var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;AUTHENTICATION_TOKEN_ERROR&apos; WHERE id = &apos;&quot; + $(&apos;account&apos;).accountId + &quot;&apos;;&quot;;
        logger.info(expression);
        dbConn.executeUpdate(expression);
        logger.info(&quot;AUTHENTICATION TOKEN API FAILED FOR ACCOUNT - &quot; + account.accountId);
		router.routeMessage(&quot;EMAIL - ACCOUNT FAILURE&quot;,JSON.stringify(account));
    } else {
        var data = response.getMessage();
        var jsonData = JSON.parse(data);
        if (jsonData) {
            var tokenTye = jsonData.token_type.charAt(0).toUpperCase() + jsonData.token_type.slice(1);
            var authorization = tokenTye + &quot; &quot; + jsonData.access_token;
            logger.info(authorization);
            var expression = &quot;SELECT * FROM auth_token_detail where ehr_account_id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
            logger.info(expression);
            var result = dbConn.executeCachedQuery(expression);
            if (result.next()) {
                var expression = &quot;UPDATE auth_token_detail set auth_token=&apos;&quot; + jsonData.access_token + &quot;&apos;,token_type=&apos;&quot; + tokenTye + &quot;&apos;  WHERE ehr_account_id=&apos;&quot; + accountId + &quot;&apos;;&quot;;
                logger.info(expression);
                dbConn.executeUpdate(expression);
            } else {
                var expression = &quot;INSERT INTO `auth_token_detail`(`id`,`auth_token`,`token_type`,`ehr_account_id`)VALUES(0,&apos;&quot; + jsonData.access_token + &quot;&apos;,&apos;&quot; + tokenTye + &quot;&apos;,&apos;&quot; + accountId + &quot;&apos;);&quot;;
                logger.info(expression);
                dbConn.executeUpdate(expression);
            }

 		var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;AUTHENTICATION_SUCCESSFUL&apos; WHERE id = &apos;&quot; + $(&apos;account&apos;).accountId + &quot;&apos; AND internal_account_status in (&apos;CREATED&apos;,&apos;UPDATED&apos;);&quot;;
        	logger.info(expression);
        	dbConn.executeUpdate(expression);

//            var expression = &quot;UPDATE ehr_account set internal_account_status=&apos;AUTHENTICATION_SUCCESSFUL&apos; WHERE id = &apos;&quot; + account.accountId + &quot;&apos;;&quot;;
//            logger.info(expression);
//            dbConn.executeUpdate(expression);
//            logger.info(&quot;AUTHENTICATION TOKEN API SUCCESS FOR ACCOUNT - &quot; + account.accountId);

        }
    }
} catch (e) {
    logger.info(e);
} finally {
    if (dbConn) {
        dbConn.close();
    }
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>//ATHENA ACCOUNT SPECIFIC DATA TRANSFORMATION AND DATA ACCESS FROM DATABASE
var dbConn;
var account = {};
account.appId = &quot;&quot;;
account.appSecret = &quot;&quot;;
account.accountId =msg[&quot;id&quot;];

try {
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var expression = &quot;SELECT * FROM ehr_auth_detail where ehr_account_id=&apos;&quot; + msg[&quot;id&quot;] + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        account.appId = result.getString(&quot;ehr_app_key&quot;);
        account.appSecret = result.getString(&quot;ehr_secret_key&quot;);
        channelMap.put(&quot;account&quot;,account);
        return true;
    }
    return false;
} finally {
    if (dbConn) {
        dbConn.close();
    }
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>//ATHENA ACCOUNT SPECIFIC DATA TRANSFORMATION AND DATA ACCESS FROM DATABASE
var dbConn;
var account = {};
account.appId = &quot;&quot;;
account.appSecret = &quot;&quot;;
account.accountId =msg[&quot;id&quot;];

try {
    dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;DB_DRIVER&apos;), &apos;jdbc:mysql://&apos; + $(&apos;DB_HOST&apos;) + &apos;:&apos; + $(&apos;DB_PORT&apos;) + &apos;/&apos; + $(&apos;DB_NAME&apos;), $(&apos;DB_USERNAME&apos;), $(&apos;DB_PASSWORD&apos;));
    var expression = &quot;SELECT * FROM ehr_auth_detail where ehr_account_id=&apos;&quot; + msg[&quot;id&quot;] + &quot;&apos;;&quot;;
    logger.info(expression);
    var result = dbConn.executeCachedQuery(expression);
    if (result.next()) {
        account.appId = result.getString(&quot;ehr_app_key&quot;);
        account.appSecret = result.getString(&quot;ehr_secret_key&quot;);
        channelMap.put(&quot;account&quot;,account);
        return true;
    }
    return false;
} finally {
    if (dbConn) {
        dbConn.close();
    }
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>